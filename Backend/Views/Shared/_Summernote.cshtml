@model App.Models.Summernote

@if (Model.LoadLib)
{
    <script src="~/lib/summernote/summernote-bs5.min.js"></script>
    <link rel="stylesheet" href="~/lib/summernote/summernote-bs5.min.css">
    <link rel="stylesheet" href="~/lib/jqueryui/themes/base/theme.css" />
    <link rel="stylesheet" href="~/lib/jqueryui/themes/base/jquery-ui.css" />
    <link rel="stylesheet" href="~/lib/elfinder/css/elfinder.full.css" />
    <link rel="stylesheet" href="~/lib/elfinder/css/theme.min.css" />
    <link rel="stylesheet" href="~/css/elfinder-material-theme/Material/css/theme-gray.css" />

    <script src="~/lib/jqueryui/jquery-ui.min.js"></script>
    <script src="~/lib/elfinder/js/elfinder.min.js"></script>
}

<script>
    (function (factory) {
        if (typeof define === 'function' && define.amd) {
            define(['jquery'], factory);
        }
        else if (typeof module === 'object' && module.exports) {
            module.exports = factory(require('jquery'));
        } else {
            factory(window.jQuery);
        }
    }(function ($) {
        $.extend($.summernote.plugins,
            {
                'elfinder': function (context) {
                    var self = this;
                    // ui has renders to build ui elements.
                    var ui = $.summernote.ui;
                    context.memo('button.elfinder', function () {
                        var button = ui.button({
                            contents: '<i class="note-icon-picture"/> elFinder',
                            tooltip: 'Manage file',
                            click: function () {
                                elfinderDialog(context);
                            }
                        });
                        // create jQuery object from button instance.
                        var $elfinder = button.render();
                        return $elfinder;
                    });
                    // This methods will be called when editor is destroyed by $('..').summernote('destroy');
                    // You should remove elements on `initialize`.
                    this.destroy = function () {
                        this.$panel.remove();
                        this.$panel = null;
                    };
                }

            });
    }));
    $(document).ready(function () {
        $('@Model.IDEditor').summernote({
            placeholder: 'Hello stand alone ui',
            tabsize: 2,
            height: @Model.Hieght,
            toolbar: @Html.Raw(Model.ToolBar)
        });
    })

    function elfinderDialog(editor) {
        var fm = $('<div/>').dialogelfinder({
            baseUrl: "@Url.Action("Connector", "FIle", new {area = "File"})",
            url: "@Url.Action("Connector", "FIle", new {area = "File"})",

            lang: 'en',
            width: 840,
            height: 450,
            destroyOnClose: true,
            getFileCallback: function (files, fm) {
                editor.invoke('editor.insertImage', files.url, "width: 300px; height: 200px;");
            },
            commandsOptions: {
                getfile: {
                    oncomplete: 'close',
                    folders: false
                }
            }
        }).dialogelfinder('instance');
    }
</script>